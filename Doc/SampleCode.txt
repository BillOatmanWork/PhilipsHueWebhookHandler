discover bridge
using Q42.HueApi;
using Q42.HueApi.Interfaces;
using System;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        // Discover Hue Bridges on the network
        var locator = new HttpBridgeLocator();
        var bridges = await locator.LocateBridgesAsync(TimeSpan.FromSeconds(5)); // Set timeout for discovery

        if (bridges.Count > 0)
        {
            foreach (var bridge in bridges)
            {
                Console.WriteLine($"Bridge found: IP = {bridge.IpAddress}, ID = {bridge.BridgeId}");
            }
        }
        else
        {
            Console.WriteLine("No bridges found on the network.");
        }
    }
}

turn scene on/off

using Q42.HueApi;
using Q42.HueApi.Interfaces;
using System;
using System.Linq;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        // Replace with your bridge's IP address and app key
        string bridgeIp = "192.168.x.x"; // Change to your bridge's IP
        string appKey = "your-app-key"; // Replace with your app key

        // Initialize the client
        ILocalHueClient client = new LocalHueClient(bridgeIp);
        client.Initialize(appKey);

        // Get the list of scenes
        var scenes = await client.GetScenesAsync();

        // Find a specific scene by name
        var scene = scenes.FirstOrDefault(s => s.Name == "Relax"); // Replace with your scene name
        if (scene is null)
        {
            Console.WriteLine("Scene not found.");
            return;
        }

        // Set fade-in effect for the scene
        var command = new LightCommand
        {
            On = true,
            TransitionTime = TimeSpan.FromSeconds(5) // 5-second fade-in effect
        };

        // Activate the scene with the fade-in effect
        await client.RecallSceneAsync(scene.Id, command);
        Console.WriteLine($"Scene '{scene.Name}' is fading in!");
		
		// use a different scene to fade in
}

to register

using Q42.HueApi;
using Q42.HueApi.Interfaces;
using System;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        // Replace with your bridge's IP address
        string bridgeIp = "192.168.x.x"; // Change to your bridge's IP

        // Initialize the client
        ILocalHueClient client = new LocalHueClient(bridgeIp);

        Console.WriteLine("Press the button on your Hue Bridge, then press Enter...");
        Console.ReadLine();

        try
        {
            // Register the application with the bridge
            string appKey = await client.RegisterAsync("MyAppName", "MyDeviceName");
            Console.WriteLine($"App registered successfully! Your app key: {appKey}");

            // Save the app key securely for future use
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}